{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://D%3A/My%20work/Projects/spiritx/Code_Rangers_02/spirit11/lib/dbconfig.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst connectMongo = async () => {\n  const mongoUrl = process.env.MONGO_URL;\n  // console.log(\"Connecting to mongo with URL:\", mongoUrl);\n  if (!mongoUrl) {\n    throw new Error(\"MONGO_URL environment variable is not defined\");\n  }\n  if (mongoose.connection.readyState === 1) {\n    console.log(\"Already connected to mongo\");\n    return mongoose.connection.asPromise();\n  }\n  return mongoose.connect(mongoUrl);\n};\n\nexport default connectMongo;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,eAAe;IACnB,MAAM,WAAW,QAAQ,GAAG,CAAC,SAAS;IACtC,0DAA0D;IAC1D,IAAI,CAAC,UAAU;QACb,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,KAAK,GAAG;QACxC,QAAQ,GAAG,CAAC;QACZ,OAAO,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,SAAS;IACtC;IACA,OAAO,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;AAC1B;uCAEe","debugId":null}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file://D%3A/My%20work/Projects/spiritx/Code_Rangers_02/spirit11/models/player.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst PlayerSchema = new mongoose.Schema({\n  _id: {\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n  },\n  name: {\n    type: String,\n    required: true,\n  },\n  university: {\n    type: String,\n    required: true,\n  },\n  category: {\n    type: String,\n    required: true,\n  },\n  totalruns: {\n    type: Number,\n    required: true,\n  },\n  ballsfaced: {\n    type: Number,\n    required: true,\n  },\n  inningsplayed: {\n    type: Number,\n    required: true,\n  },\n  wickets: {\n    type: Number,\n    required: true,\n  },\n  overbowled: {\n    type: Number,\n    required: true,\n  },\n  runsconceded: {\n    type: Number,\n    required: true,\n  },\n  available: {\n    type: Boolean,\n    required: true,\n  },\n  \n}, { timestamps: false, versionKey: false });\n\nexport default mongoose.models.Player || mongoose.model('Player', PlayerSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,eAAe,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACvC,KAAK;QACH,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,YAAY;QACV,MAAM;QACN,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;IACA,WAAW;QACT,MAAM;QACN,UAAU;IACZ;IACA,YAAY;QACV,MAAM;QACN,UAAU;IACZ;IACA,eAAe;QACb,MAAM;QACN,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,UAAU;IACZ;IACA,YAAY;QACV,MAAM;QACN,UAAU;IACZ;IACA,cAAc;QACZ,MAAM;QACN,UAAU;IACZ;IACA,WAAW;QACT,MAAM;QACN,UAAU;IACZ;AAEF,GAAG;IAAE,YAAY;IAAO,YAAY;AAAM;uCAE3B,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,UAAU","debugId":null}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file://D%3A/My%20work/Projects/spiritx/Code_Rangers_02/spirit11/app/api/player/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport mongoose from \"mongoose\";\nimport connectMongo from \"@/lib/dbconfig\";\nimport Player from \"@/models/player\";\n\n// GET all players\nexport const GET = async () => {\n  try {\n    await connectMongo();\n    const players = await Player.find();\n    return new NextResponse(JSON.stringify(players), { status: 200 });\n  } catch (error: any) {\n    return new NextResponse(\"Error in fetching players: \" + error.message, {\n      status: 500,\n    });\n  }\n};\n\n// POST a new player\nexport const POST = async (request: Request) => {\n  try {\n    const body = await request.json();\n    await connectMongo();\n    const newPlayer = new Player(body);\n    await newPlayer.save();\n    return new NextResponse(JSON.stringify(newPlayer), { status: 201 });\n  } catch (error: any) {\n    return new NextResponse(\"Error in creating player: \" + error.message, {\n      status: 500,\n    });\n  }\n};\n\n// PATCH an existing player\nexport const PATCH = async (request: Request) => {\n  try {\n    const body = await request.json();\n    const { playerId, ...updateData } = body;\n\n    await connectMongo();\n    if (!mongoose.Types.ObjectId.isValid(playerId)) {\n      return new NextResponse(\"Invalid Player ID\", { status: 400 });\n    }\n\n    const updatedPlayer = await Player.findByIdAndUpdate(playerId, updateData, {\n      new: true,\n    });\n\n    if (!updatedPlayer) {\n      return new NextResponse(\"Player not found\", { status: 404 });\n    }\n\n    return new NextResponse(JSON.stringify(updatedPlayer), { status: 200 });\n  } catch (error: any) {\n    return new NextResponse(\"Error in updating player: \" + error.message, {\n      status: 500 },\n    );\n  }\n};\n\n// DELETE a player\nexport const DELETE = async (request: Request) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const playerId = searchParams.get(\"playerId\");\n\n    if (!playerId) {\n      return new NextResponse(\"Player ID not found\", { status: 400 });\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(playerId)) {\n      return new NextResponse(\"Invalid Player ID\", { status: 400 });\n    }\n\n    await connectMongo();\n    const deletedPlayer = await Player.findByIdAndDelete(playerId);\n\n    if (!deletedPlayer) {\n      return new NextResponse(\"Player not found\", { status: 404 });\n    }\n\n    return new NextResponse(JSON.stringify(deletedPlayer), { status: 200 });\n  } catch (error: any) {\n    return new NextResponse(\"Error in deleting player: \" + error.message, {\n      status: 500 },\n    );\n  }\n};"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;AAGO,MAAM,MAAM;IACjB,IAAI;QACF,MAAM,CAAA,GAAA,iHAAA,CAAA,UAAY,AAAD;QACjB,MAAM,UAAU,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI;QACjC,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC,UAAU;YAAE,QAAQ;QAAI;IACjE,EAAE,OAAO,OAAY;QACnB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,gCAAgC,MAAM,OAAO,EAAE;YACrE,QAAQ;QACV;IACF;AACF;AAGO,MAAM,OAAO,OAAO;IACzB,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,CAAA,GAAA,iHAAA,CAAA,UAAY,AAAD;QACjB,MAAM,YAAY,IAAI,kHAAA,CAAA,UAAM,CAAC;QAC7B,MAAM,UAAU,IAAI;QACpB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC,YAAY;YAAE,QAAQ;QAAI;IACnE,EAAE,OAAO,OAAY;QACnB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,+BAA+B,MAAM,OAAO,EAAE;YACpE,QAAQ;QACV;IACF;AACF;AAGO,MAAM,QAAQ,OAAO;IAC1B,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,GAAG,YAAY,GAAG;QAEpC,MAAM,CAAA,GAAA,iHAAA,CAAA,UAAY,AAAD;QACjB,IAAI,CAAC,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW;YAC9C,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,qBAAqB;gBAAE,QAAQ;YAAI;QAC7D;QAEA,MAAM,gBAAgB,MAAM,kHAAA,CAAA,UAAM,CAAC,iBAAiB,CAAC,UAAU,YAAY;YACzE,KAAK;QACP;QAEA,IAAI,CAAC,eAAe;YAClB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,oBAAoB;gBAAE,QAAQ;YAAI;QAC5D;QAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC,gBAAgB;YAAE,QAAQ;QAAI;IACvE,EAAE,OAAO,OAAY;QACnB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,+BAA+B,MAAM,OAAO,EAAE;YACpE,QAAQ;QAAI;IAEhB;AACF;AAGO,MAAM,SAAS,OAAO;IAC3B,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,WAAW,aAAa,GAAG,CAAC;QAElC,IAAI,CAAC,UAAU;YACb,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,uBAAuB;gBAAE,QAAQ;YAAI;QAC/D;QAEA,IAAI,CAAC,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW;YAC9C,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,qBAAqB;gBAAE,QAAQ;YAAI;QAC7D;QAEA,MAAM,CAAA,GAAA,iHAAA,CAAA,UAAY,AAAD;QACjB,MAAM,gBAAgB,MAAM,kHAAA,CAAA,UAAM,CAAC,iBAAiB,CAAC;QAErD,IAAI,CAAC,eAAe;YAClB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,oBAAoB;gBAAE,QAAQ;YAAI;QAC5D;QAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC,gBAAgB;YAAE,QAAQ;QAAI;IACvE,EAAE,OAAO,OAAY;QACnB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,+BAA+B,MAAM,OAAO,EAAE;YACpE,QAAQ;QAAI;IAEhB;AACF","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}